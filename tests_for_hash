#include<iostream>
#include<vector>

long long factorial(long long n)
{
	return (n == 1 || n == 0) ? 1 : factorial(n - 1) * n;
}

#define UI unsigned int
UI random(){
	return r(generator);
}
class Init_test{
private:
		bool has_repetitions;
		std::vector<UI> keys;
		std::set<UI> keys_unique;
		UI n;
		clock_t cl;
public:
	Init_test(bool temp){
		has_repetitions = temp;
	}
	Init_test(){
		has_repetitions = false;
	}
	Init_test(bool temp, std::vector<UI> k){
		keys.resize(k.size());
		std::copy(k.begin(), k.end(), keys.begin());
		has_repetitions = temp;
	} 
	Init_test(std::vector<UI> k){
		keys.resize(k.size());
		std::copy(k.begin(), k.end(), keys.begin());
		has_repetitions = false;
	}
	void get_uniq_keys(){
		generate_n(keys.begin(), n, random);
		for (int i = 0; i < n; i++)
			keys_unique.insert(keys[i]);
		keys.clear();
		for (set<UI>::iterator i = keys_unique.begin(); i != keys_unique.end(); ++i)
			keys.push_back(*i);
	}
	void generate(PerfectHashTable t, bool _new){
		has_repetitions = _new;
		generate(t);
	}
	void generate(PerfectHashTable t){
		if (has_repetitions)
			show_interface_rep(t);
		else
			show_interface_norep(t);
	}
	void show_interface_rep(PerfectHashTable t){
		int form;
		std::cout << "Choose test form:\n";
		std::cout << "'0' for sequence like h0, h0, h0\n";
		std::cout << "'1' for sequence like h0, h1\n";
		std::cout << "'2' for sequence like h0, h0, h1, h1, h2, h2 + shuffle\n";
		
		std::cin >> form;
		std::cout << "choose size <=10^6\n";
		std::cin >> n;
		vector<UI>base;
		keys.resize(n);
		switch (form){
		case 0:
			base.resize(1);
			base[0] = r(generator);
			cout << base[0] << endl;
			for (size_t i = 0; i < n; ++i){
				keys[i] = base[0];
			}
			cl = clock();
			t.init(keys);
			cl = clock() - cl;
			cout << (double)cl / CLOCKS_PER_SEC << "s" << endl;
			if (t.check())
				cout << "Correct\n";
			else
				cout << "Incorrect\n";
			t.clear();
			break;
		default:
			break;
		}
	}
	void show_interface_norep(PerfectHashTable t){
		int form;
		std::cout << "Choose test form:\n";
		std::cout << "'0' for all permutations size must be rather small\n'1' for random sequence\n";
		std::cin >> form;
		std::cout << "choose size <=10^6\n";
		std::cin >> n;
		keys.resize(n);
		switch (form){
		case 1:
			get_uniq_keys();
			cl = clock();
			t.init(keys);
			cl = clock() - cl;
			cout << (double)cl / CLOCKS_PER_SEC << "s" << endl;
			if (t.check())
				cout << "Correct\n";
			else
				cout << "Incorrect\n";
			t.clear();
			keys_unique.clear();
			break;
		case 0:
			get_uniq_keys();
			long long count_of_ok_iterations = 0;
			cl = clock();
			do{
				t.init(keys);
				if (t.check())
					count_of_ok_iterations++;
				t.clear();
			} while (next_permutation(keys.begin(), keys.end()));
			cl = clock() - cl;
			cout << (double)cl / CLOCKS_PER_SEC << "s" << endl;
			if (count_of_ok_iterations == factorial(1ll * keys.size()))
				cout << "Correct\n";
			else
				cout << "Incorrect\n";
		
			break;
		}
	}
};
